#!/bin/bash

# ============================================================================
# Agent-Orange CLI Wrapper Script
# ============================================================================
#
# This script provides a global command-line interface for the Agent-Orange
# pentesting chatbot. It can be called from any directory and will launch
# the chatbot with the appropriate arguments.
#
# USAGE:
#   agnt-orange                    # Launch interactive CLI mode
#   agnt-orange <command>          # Execute specific command
#   agnt-orange --help             # Show help information
#   agnt-orange --version          # Show version information
#
# EXAMPLES:
#   agnt-orange "Hello, how are you?"
#   agnt-orange "analyze /path/to/binary with ghidra"
#   agnt-orange "embed 'text to vectorize'"
#   agnt-orange "search for security documents"
# ============================================================================

set -e

# Script configuration
SCRIPT_NAME="agnt-orange"
SCRIPT_VERSION="1.0.0"
PROJECT_NAME="Agent-Orange"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_status() {
    local status=$1
    local message=$2
    
    case $status in
        "INFO")
            echo -e "${BLUE}[INFO]${NC} $message"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[SUCCESS]${NC} $message"
            ;;
        "WARNING")
            echo -e "${YELLOW}[WARNING]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} $message"
            ;;
    esac
}

# Get the directory where this script is located
get_script_dir() {
    # Get the absolute path of this script
    local script_path="$(readlink -f "${BASH_SOURCE[0]}")"
    # Get the directory containing this script
    echo "$(dirname "$script_path")"
}

# Find the project root directory
find_project_root() {
    local script_dir="$(get_script_dir)"
    local current_dir="$script_dir"
    
    # Look for project root by checking for key files
    while [[ "$current_dir" != "/" ]]; do
        if [[ -f "$current_dir/install.sh" && -f "$current_dir/main/Main.java" ]]; then
            echo "$current_dir"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    
    # If not found, assume script is in project root
    echo "$script_dir"
}

# Check if Java is available
check_java() {
    if ! command -v java >/dev/null 2>&1; then
        print_status "ERROR" "Java not found. Please install Java 17+ first."
        exit 1
    fi
    
    local version=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2)
    local major_version=$(echo $version | cut -d'.' -f1)
    
    if [[ $major_version -lt 17 ]]; then
        print_status "ERROR" "Java version $version found. Java 17+ is required."
        exit 1
    fi
}

# Check if the chatbot JAR exists
check_jar() {
    local project_root="$1"
    local jar_path="$project_root/bin/chatbot.jar"
    
    if [[ ! -f "$jar_path" ]]; then
        print_status "ERROR" "Chatbot JAR not found: $jar_path"
        print_status "INFO" "Please run the installation script first:"
        print_status "INFO" "  cd $project_root && ./install.sh"
        exit 1
    fi
    
    echo "$jar_path"
}

# Set up environment variables
setup_environment() {
    local project_root="$1"
    
    # Set library path for JNI
    export LD_LIBRARY_PATH="$project_root/bin:$LD_LIBRARY_PATH"
    export DYLD_LIBRARY_PATH="$project_root/bin:$DYLD_LIBRARY_PATH"
    
    # Set Java options
    export JAVA_OPTS="${JAVA_OPTS:--Xmx4g -Xms2g}"
    
    # Set working directory
    cd "$project_root"
}

# Show help information
show_help() {
    echo
    echo "Agent-Orange CLI Wrapper v$SCRIPT_VERSION"
    echo "========================================"
    echo
    echo "USAGE:"
    echo "  $SCRIPT_NAME                    # Launch interactive CLI mode"
    echo "  $SCRIPT_NAME <command>          # Execute specific command"
    echo "  $SCRIPT_NAME --help             # Show this help information"
    echo "  $SCRIPT_NAME --version          # Show version information"
    echo
    echo "EXAMPLES:"
    echo "  $SCRIPT_NAME \"Hello, how are you?\""
    echo "  $SCRIPT_NAME \"analyze /path/to/binary with ghidra\""
    echo "  $SCRIPT_NAME \"embed 'text to vectorize'\""
    echo "  $SCRIPT_NAME \"search for security documents\""
    echo
    echo "COMMANDS:"
    echo "  General Chat: Natural language conversation"
    echo "  Binary Analysis: \"analyze /path/to/binary with ghidra\""
    echo "  Text Embedding: \"embed 'text to vectorize'\""
    echo "  Vector Search: \"search for documents about security\""
    echo "  LLM Generation: \"generate text about cybersecurity\""
    echo
    echo "BUILT-IN COMMANDS (in interactive mode):"
    echo "  help     - Show help information"
    echo "  status   - Display module status"
    echo "  history  - Show command history"
    echo "  clear    - Clear screen"
    echo "  exit     - Exit the chatbot"
    echo
}

# Show version information
show_version() {
    echo "$SCRIPT_NAME v$SCRIPT_VERSION"
    echo "Agent-Orange Pentesting Chatbot CLI Wrapper"
    echo "Project: $PROJECT_NAME"
}

# Main execution function
main() {
    local args="$*"
    
    # Handle help and version flags
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        show_help
        exit 0
    elif [[ "$1" == "--version" || "$1" == "-v" ]]; then
        show_version
        exit 0
    fi
    
    # Find project root
    local project_root="$(find_project_root)"
    
    # Check dependencies
    check_java
    
    # Check for JAR file
    local jar_path="$(check_jar "$project_root")"
    
    # Set up environment
    setup_environment "$project_root"
    
    # Launch the chatbot
    if [[ -z "$args" ]]; then
        # No arguments - launch interactive mode
        print_status "INFO" "Launching Agent-Orange in interactive mode..."
        print_status "INFO" "Type 'help' for available commands, 'exit' to quit."
        echo
        java -jar "$jar_path"
    else
        # Arguments provided - execute command
        print_status "INFO" "Executing command: $args"
        echo "$args" | java -jar "$jar_path"
    fi
}

# Run main function with all arguments
main "$@" 